module pe {
  extern module ross;

  include "typedefs.h";
  include "completion.h";

  readonly CProxy_PE pes;

  group PE {
    entry [notrace] PE(CProxy_Initialize); /**< constructor called from the mainchare */
    entry [notrace,reductiontarget] void load_balance_complete(); /**< Called after ldb */
    entry [notrace,reductiontarget] void resume_scheduler(); /**< Called after ldb */
    entry [notrace,reductiontarget] void end_simulation(CkReductionMsg*);
    entry [notrace] void broadcast_detector_proxies(int num, CProxy_CompletionDetector proxies[num]);
    entry [notrace] void initialize_detectors();
    entry [notrace] void initialize_rand();

    // GVT methods
    entry [notrace] void gvt_begin(); /**< begin gvt computation */
    entry [notrace] void greedy_gvt_begin(); /**< attempt to greedily force a GVT */
    entry [notrace] void gvt_contribute(); /**< contribute to gvt reduction */
    entry [notrace,reductiontarget] void gvt_end(CkReductionMsg*); /**< end of gvt computation */

    // Scheduler methods
    entry [notrace] void execute_seq(); /**< execute until the end of simulation */
    entry [notrace] void execute_cons(); /**< move to the end of this epoch */
    entry [notrace] void execute_opt(); /**< move one step further optimistically */
  };

  initnode registerStatsReduction(void);
  initnode registerGVTReduction(void);
}
